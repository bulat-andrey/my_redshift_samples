DROP SCHEMA IF EXISTS scd CASCADE;
CREATE SCHEMA SCD;

-- TABLE FOR INITIAL LOAD
drop table if exists scd.first_load_products;
CREATE TABLE scd.first_load_products
(
  product_id bigint not null,
  name varchar(30),
  price int
--   ,start_date timestamp WITHOUT time ZONE
--                     DEFAULT '2020-01-01 00:00:00'::timestamp WITHOUT time ZONE,  -- excessive column
--   end_date timestamp WITHOUT time ZONE
--                     DEFAULT '9999-12-31 00:00:00'::timestamp WITHOUT time ZONE   -- excessive column
   )
  backup no;

INSERT INTO scd.first_load_products(product_id,name, price) VALUES
(1,'Product_1', 199 ),
(2,'Product_2', 49 ),
(3,'Product_3', 19 );

SELECT * FROM scd.first_load_products;


--INITIAL LOAD INTO history table
DROP TABLE IF EXISTS scd.products_h CASCADE;
CREATE TABLE scd.products_h (
h_id                bigint GENERATED BY DEFAULT AS IDENTITY(1, 1),
product_id          bigint distkey,
name                CHARACTER VARYING(30),
price               integer,
track_hash          bigint,
start_date          date
                    DEFAULT '2020-01-01'::date,
end_date            date
                    DEFAULT '9999-12-31'::date,
--record_active_flag  SMALLINT DEFAULT 1,
record_update_ts    timestamp WITHOUT time ZONE DEFAULT NULL,
record_insert_ts    timestamp WITHOUT time ZONE DEFAULT current_timestamp
)
DISTSTYLE KEY
SORTKEY (product_id);

insert into scd.products_h
    (product_id, name, price, track_hash)
select
    p.product_id,
    p.name,
    p.price,
    FNV_HASH(name+price) as track_hash
from
    scd.first_load_products p
;
/*
SELECT * FROM scd.products_h;   -- intermediate check
*/

drop table if exists scd.first_load_products;

--creation of daily landing table
DROP TABLE IF EXISTS scd.daily_landing_products;
CREATE TABLE scd.daily_landing_products (
  product_id bigint not null,
  name varchar(30),
  price int,
  effective_date date
  );

  INSERT INTO scd.daily_landing_products(product_id, name, price, effective_date) VALUES
(1,'Product_1', 2999, current_date ), -- 199 -> 299
(2,'Product_2', 999, current_date ),  -- 49  -> 99
(3,'Product_3', 19, current_date ),  -- NO changes
(4,'Product_4', 399, current_date )   -- NEW RECORD
;

/*
SELECT * FROM scd.daily_landing_products;  -- intermediate check
 */

CREATE OR REPLACE PROCEDURE sp_products_load()
LANGUAGE plpgsql
AS $$
BEGIN
    --creation of stage table
	drop table if exists scd.stage_products;
    create table scd.stage_products backup no
    	distkey(stg_product_id)

    as
    with stg as (
    SELECT
        product_id as stg_product_id,
        name as stg_name,
        price as stg_price,
        effective_date as stg_effective_date,
        FNV_HASH(stg_name+stg_price) as stg_track_hash
    FROM
        scd.daily_landing_products
    )
    SELECT
        s.*,
        CASE WHEN h.product_id IS NULL THEN 1 ELSE 0 END new_ind,
        CASE WHEN h.product_id IS NOT NULL
            AND s.stg_track_hash <> h.track_hash THEN 1 ELSE 0 END track_ind
    FROM stg s
    LEFT JOIN scd.products_h h
    ON s.stg_product_id = h.product_id
    ;

    truncate scd.daily_landing_products;

    update scd.products_h
    set end_date = stg_effective_date - interval '1 day',
        -- record_active_flag = 0,
        record_update_ts = current_timestamp
    from scd.stage_products
    where product_id = stg_product_id
    and end_date = '9999-12-31'
    and track_ind = 1;


    insert into scd.products_h
    (product_id,
    name,
    price,
    track_hash,
    start_date,
    end_date,
    -- record_active_flag,
    record_insert_ts,
    record_update_ts)
    select
        stg_product_id,
        stg_name,
        stg_price,
        stg_track_hash,
        stg_effective_date as start_date,
        '9999-12-31' as end_date,
        -- 1 as record_active_flag,
        current_timestamp as record_insert_ts,
        current_timestamp as record_upd_ts
    from
        scd.stage_products
    where
        track_ind = 1 or new_ind = 1;

drop table if exists scd.stage_products;

END;
$$;

call sp_products_load();

select * from scd.products_h ph order by product_id, h_id;


CREATE OR REPLACE PROCEDURE sp_eod_product(IN input date, OUT SETOF)
select * from scd.products_h ph
 where start_date<='2022-02-02' and end_date>='2022-02-02';

select * from scd.products_h ph order by product_id, h_id;

select * from scd.products_h ph
 where start_date<=last_day('2022-02-02')
 and end_date>=last_day('2022-02-02');





select last_day('2020-01-01');